# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-09-28T00:14:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field


class BodyCreateUserRoleApiV1UsersUserIdRolesPost(BaseModel):
    role_id: UUID = Field(..., title='Role Id')


class BodyDeleteUserRoleApiV1UsersUserIdRolesDelete(BaseModel):
    role_id: UUID = Field(..., title='Role Id')


class BodyRefreshTokensApiV1RefreshTokensPost(BaseModel):
    refresh_token: str = Field(..., title='Refresh Token')


class Credentials(BaseModel):
    username: str = Field(..., title='Email')
    password: str = Field(..., title='Пароль')


class HTTPExceptionResponse(BaseModel):
    detail: str = Field(..., title='Detail')


class RoleBase(BaseModel):
    name: str = Field(..., title='Название')


class RoleResponse(BaseModel):
    name: str = Field(..., title='Название')
    id: UUID = Field(..., title='Id')


class SessionResponse(BaseModel):
    id: UUID = Field(..., title='Id')
    user_agent: str = Field(..., title='User Agent')
    created_at: datetime = Field(..., title='Created At')
    modified_at: Optional[datetime] = Field(None, title='Modified At')
    session_exp: Optional[datetime] = Field(None, title='Session Exp')


class TokenPair(BaseModel):
    access_token: str = Field(..., title='Access Token')
    refresh_token: str = Field(..., title='Refresh Token')


class UserCreate(BaseModel):
    email: EmailStr = Field(..., title='Email')
    name: str = Field(..., title='Имя')
    password: str = Field(..., title='Пароль')


class UserPatch(BaseModel):
    email: Optional[EmailStr] = Field(None, title='Email')
    name: Optional[str] = Field(None, title='Имя')
    password: Optional[str] = Field(None, title='Пароль')


class UserResponse(BaseModel):
    email: EmailStr = Field(..., title='Email')
    name: str = Field(..., title='Имя')
    id: UUID = Field(..., title='Id')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class AllowRole(Enum):
    admin = 'admin'
    subscriber = 'subscriber'


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
