# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-09-28T00:14:32+00:00

from __future__ import annotations

from fastapi import APIRouter

import sys
from typing import List, Optional, Union

sys.path.append("..")

from dependencies import *


router = APIRouter(tags=['Authorization'])


@router.get(
    '/api/v1/check_access',
    response_model=None,
    responses={
        '401': {'model': HTTPExceptionResponse},
        '403': {'model': HTTPExceptionResponse},
        '422': {'model': HTTPValidationError},
    },
    tags=['Authorization'],
)
def check_access_api_v1_check_access_get(
    allow_roles: Optional[List[AllowRole]] = None,
) -> Optional[Union[HTTPExceptionResponse, HTTPValidationError]]:
    """
    Check access
    """
    pass


@router.post(
    '/api/v1/login',
    response_model=TokenPair,
    responses={
        '401': {'model': HTTPExceptionResponse},
        '422': {'model': HTTPValidationError},
    },
    tags=['Authorization'],
)
def login_api_v1_login_post(
    body: Credentials,
) -> Union[TokenPair, HTTPExceptionResponse, HTTPValidationError]:
    """
    Log in
    """
    pass


@router.post(
    '/api/v1/logout',
    response_model=None,
    responses={'401': {'model': HTTPExceptionResponse}},
    tags=['Authorization'],
)
def logout_api_v1_logout_post() -> Optional[HTTPExceptionResponse]:
    """
    Log out
    """
    pass


@router.post(
    '/api/v1/refresh_tokens',
    response_model=TokenPair,
    responses={
        '401': {'model': HTTPExceptionResponse},
        '422': {'model': HTTPValidationError},
    },
    tags=['Authorization'],
)
def refresh_tokens_api_v1_refresh_tokens_post(
    body: BodyRefreshTokensApiV1RefreshTokensPost,
) -> Union[TokenPair, HTTPExceptionResponse, HTTPValidationError]:
    """
    Refresh token
    """
    pass
